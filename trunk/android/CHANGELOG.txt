----- StarLib Changelog -----

4/29/12 Changelist:
STARLIB CHANGES:
- Added StarLCallable. All Callables must implement StarLCallable in order to simulate properly!
- Added gvh.pause and gvh.time methods. These must be used to pause methods and get the system time.
- Removed Thread as the baseclass of SingleHopMutualExclusion. There was no need for it to be a thread!
- Renamed "bluetooth" package to the more fitting "motion"
- Added new SmartCommsHandler which will one day replace CommsHandler. SCH will schedule (get it?) sleep delays appropriately, allowing for faster simulations.

SIMULATOR CHANGES:
- Decoupled simulator from real time!
- Added Decoupled message channel, removed all others
- Modified ideal and realistic motion sim to use the decoupled timing mechanic
- Added SimulationEngine class to maintiain decoupled simulation
- Added time and scale to GUI
- Added display of world grid
- Flipped simulated world vertically to match the real world

4/25/12 Changelist:

STARLIB CHANGES:
- Fixed a couple of bugs that could cause a CPU-consuming loop in Motion Automaton
- Added velocity public var to ItemPosition class. PositionList automatically calculates velocity when updating positions
- Fixed a case in which MotionAutomaton wouldn't correct for drift and would completely miss a target
- Fixed a case in MotionAutomaton where repeatedly sending a goTo command with the same destination would prevent motion
- Fixed a bug which would crash a simulated MotionAutomaton if motion_stop() was called

SIMULATOR CHANGES:
- Fixed "jumping" simulated robot motion problem


4/20/12 Changelist: 

SIMULATOR CHANGES:
- Changed robot radius to actual iRobot Create size
- Fixed several bugs in the drawing code related to radius and direction drawing
- Added a setting to switch between ideal and realistic simulated motion
- Changed SimApp class to instantiate a LogicThread object. This allows ANY StarL's LogicThread to be run in simulation!

STARLIB CHANGES:
- Removed BluetoothRobotMotion class
- Added additional parameters to MotionParameters class
- Updated CommsHandler to no longer receive or ACK broadcasts from ourself
- Added non-ideal simulated motion! This uses the RealisticSimMotionAutomaton, an extension of MotionAutomaton
- Added harnesses and updated interfaces for the realistic simulated motion
- Fixed a bug in MotionAutomaton that prevented stopped motion controllers from resuming correctly. This also reduces CPU usage!
- Added different collision avoidance modes to the MotionParameters class. Robots can now use collision avoidance, stop on collsion,
or run in "bumpercars" mode, where collisions don't matter.
- Added setParameters method to all RobotMotion classes. This sets the default motion parameters so a MotionParameters object doesn't need to be passed with every motion.

4/16/12 Changelist:

STARLIB CHANGES:
- Changed ItemPosition values to be public variables and marked getter methods as deprecated. All references to these deprecated methods should be removed!
- Added trace output to Geocaster
- Removed the unnecessary "getWaypoints()" method from Gps
- Removed interfaces associated with network discovery, which was removed for being glitchy and generally useless.
- Added javadoc comments to nearly everything of importance
- Added MotionParameters class, implemented by MotionAutomaton. This allows every robot motion to have different user-specified parameters
- Improved MotionAutomaton considerably. Movement speed now ramps linearly to minimize error.
- BluetoothRobotMotion has been deprecated and will be removed in the next release

4/6/12 Changelist:

SIMULATOR CHANGES:
- Added trace output to simulated GPS receiver and simulated motion automaton.
- Added option to start TraceWriter with clock drift and skew to add "realism" to simulator.
- Added a simple distance predicate checker to the simulator. If enabled in the main class, this records the times at which any two robots were closer than a predefined radius. Output is in an XML with the same formatting as trace files.
- Fixed IdealSimMotionAutomaton to properly implement the public boolean variable inMotion
- Moved all simulation settings to the final SimSettings class. One day this will load settings from a file or GUI, and all will be good.
- Simulation's WptLoader class can now handle WPT files with spaces in them.

STARLIB CHANGES:
- Added Geocaster to functions package with support for both rectangular and circular target regions
- Changed RandomLeaderElection to run asynchronously when electing a leader. The interface remains the same.
- Fixed BullyLeaderElection to operate asynchronously without using Android specific code. BLE now works properly.
- Created a public RobotMotion named "moat" in the gvh.plat object. RealGVH and SimGVH both instantiate the correct motion object. RealGVH's constructor now needs a MAC address to connect to.
- Fixed ACK messages not being correctly recorded in trace files by CommsHandler. This was caused by the "name" variable not being set in the Comms class and also prevented some message handling from occurring properly.
- Increased the maximum number of message sequence numbers from 10000 to Integer.MAX_VALUE (apx 2.1 billion)
- Fixed a bug in the UdpComThread that prevented physical messages from being exchanged (!)
- Fixed a bug in BluetoothInterface where reading information would incorrectly return the wrong bytes

OTHER CHANGES:
- Added abstract class LogicThread to StarLib's "interfaces" package.
- Added a new project, "StarlTemplate", with a redesigned Activity class and new "AppLogic" class extending LogicThread implementing Callable. This template project will become the base for all future StarL applications once it has been properly tested. LogicThreads which implement Callable are closer to the SimApp class, making the transition from simulation to implementation easier.